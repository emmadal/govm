name: Build and Release
on:
  push:
    tags:
      - 'v*' # Trigger only on tags that start with "v" (e.g., v1.0.0)

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      # Using GitHub's REST API with the RELEASE_TOKEN to check if the user is a repository admin
      - name: Verify Owner/Admin Access
        run: |
          if [[ "${{ github.event.repository.owner.name }}" != "${{ github.actor }}" ]]; then
            # Check if user is an admin via the API
            REPO="${{ github.repository }}"
            RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.RELEASE_TOKEN }}" \
              "https://api.github.com/repos/$REPO/collaborators/${{ github.actor }}/permission")
            PERMISSION=$(echo $RESPONSE | jq -r '.permission')
            echo "User ${{ github.actor }} has $PERMISSION permissions."
            if [[ "$PERMISSION" != "admin" ]]; then
              echo "Error: Only repository owners or admins can trigger releases!"
              exit 1
            fi
          else
            echo "User ${{ github.actor }} is the repository owner. Proceeding with build."
          fi

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24' # You can adjust this to your preferred Go version

      - name: Build binaries
        run: |
          # Create a directory for the binaries
          mkdir -p build

          # List of OS and architectures to build for
          PLATFORMS=("linux/amd64" "linux/arm64" "linux/386" "darwin/amd64" "darwin/arm64" "windows/amd64" 
          "windows/arm64" "windows/386" )
          
          # Build for each platform
          for PLATFORM in "${PLATFORMS[@]}"; do
            OS="${PLATFORM%/*}"
            ARCH="${PLATFORM#*/}"
            
            echo "Building for $OS/$ARCH..."
            
            # Set environment variables for cross-compilation
            GOOS=$OS GOARCH=$ARCH go build -ldflags="-s -w" -o "build/govm_${OS}_${ARCH}" .
            
            if [ $? -ne 0 ]; then
              echo "Failed to build for $OS/$ARCH"
              exit 1
            fi
          done

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            build/govm_linux_amd64
            build/govm_linux_arm64
            build/govm_linux_386
            build/govm_darwin_amd64
            build/govm_darwin_arm64
            build/govm_windows_amd64.exe
            build/govm_windows_arm64.exe
            build/govm_windows_386.exe
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}